<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tanx.music.dao.SongMapper">

        <insert id="addSong" parameterType="song">
        insert into song(`song_id`,`song_name`,`song_images`,`song_length`,`song_address`,`region_id`)
        values (#{songId},#{songName},#{songImages},#{songLength},#{songAddress},#{regionId})
    </insert>

    <update id="updateSong">
        update MusicWebsite.song
        <trim prefix="set" suffixOverrides=",">
            <if test="songName!= null">song_name = #{songName},</if>
            <if test="layric != null">layric = #{layric},</if>
            <if test="regionId != null">region_id = #{regionId},</if>
        </trim>
        where song_id = #{songId}
    </update>

    <delete id="deleteSongs" parameterType="list">
        delete from MusicWebsite.song where song_id in
        <foreach item="item" collection="lists" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <delete id="deleteSong">
        delete from MusicWebsite.song where song_id = #{songId}
    </delete>

    <delete id="deleteSongList">
        delete from MusicWebsite.song where song_id in
    <foreach collection="songId" open="(" close=")" separator="," item="song">
        #{song}
    </foreach>
    </delete>

    <!-- 根据地域查询歌曲信息 -->
    <select id="findSong" resultType="songVo"  resultMap="newSong">
        select
            s.song_id,s.song_id, s.song_name, s.song_images, s.song_length, s.song_address, s.lyric, s.add_time,
            sing.singer_id, sing.singer_name,
            r.region_id, r.region_name,
            a.album_id, album_name
        from
            song s,
            singer_and_song sas,
            singer sing,
            region r,
            album a
        where
            s.song_id = sas.song_id and sas.singer_id = sing.singer_id
          and s.album_id = a.album_id
          and s.region_id = r.region_id
          and s.song_id in (select song_id from (select * from MusicWebsite.song where region_id = #{regionId} order by add_time desc limit 36) as s)
    </select>

    <!-- 查询最新歌曲 -->
    <select id="findNewSong" resultType="songVo" resultMap="newSong">
        select
            s.song_id,s.song_id, s.song_name, s.song_images, s.song_length, s.lyric, s.add_time,
            sing.singer_id, sing.singer_name,
            r.region_id, r.region_name,
            a.album_id, album_name
        from
            song s,
            singer_and_song sas,
            singer sing,
            region r,
            album a
        where
            s.song_id = sas.song_id and sas.singer_id = sing.singer_id
          and s.album_id = a.album_id
          and s.region_id = r.region_id
          and s.song_id in (select song_id from (select * from MusicWebsite.song order by add_time desc limit 36) as s)
    </select>

    <select id="findSongByKeyword" resultType="songVo" parameterType="map" resultMap="newSong">
        select
            s.song_id,s.song_id, s.song_name, s.song_images, s.song_length, s.song_address, s.lyric, s.add_time,
            sing.singer_id, sing.singer_name,
            r.region_id, r.region_name,
            a.album_id, album_name
        from
            song s,
            singer_and_song sas,
            singer sing,
            region r,
            album a
        where
            s.song_id = sas.song_id and sas.singer_id = sing.singer_id
          and s.album_id = a.album_id
          and s.region_id = r.region_id
          and s.song_id in (select song_id from (select * from song where song_name like #{keyword} order by add_time desc limit #{current},#{length}) as s)
    </select>
    <select id="findSongByKeywordCount" resultType="int" parameterType="map">
        select count(distinct s.song_id)
        from
            song s,
            singer_and_song sas,
            singer sing,
            region r,
            album a
        where
            s.song_id = sas.song_id and sas.singer_id = sing.singer_id
          and s.album_id = a.album_id
          and s.region_id = r.region_id
          and s.song_id in (select song_id from (select * from song where song_name like #{keyword}) as s)
    </select>

    <resultMap id="newSong" type="songVo">
        <result column="song_id" property="songId"/>
        <result column="song_name" property="songName"/>
        <result column="song_images" property="songImages"/>
        <result column="song_length" property="songLength"/>
        <result column="lyric" property="lyric"/>
        <result column="add_time" property="addTime"/>

        <collection property="region" javaType="region" ofType="region">
            <id column="region_id" javaType="int" property="regionId"></id>
            <result column="region_name" javaType="String" property="regionName"></result>
        </collection>

        <collection property="author" javaType="list" ofType="singer">
            <id column="singer_id" property="singerId"></id>
            <result column="singer_name" property="singerName"></result>
        </collection>

        <collection property="album" javaType="Album" ofType="Album">
            <result column="album_id" javaType="String" property="albumId"></result>
            <result column="album_name" javaType="String" property="albumName"></result>
        </collection>
    </resultMap>

    <select id="findSongAddress" resultType="java.lang.String">
        select song_address from MusicWebsite.song where song_id = #{songId}
    </select>

    <select id="findSongSinger" resultType="singerSongVo" resultMap="sin_song">
        select s.song_id,s.song_name,s.song_images,s.song_length,s.region_id,s.lyric,
               al.album_name,al.album_id,s.add_time,s.song_address
        from song s,singer sin,singer_and_song sas,album al
        where s.song_id = sas.song_id and sin.singer_id = sas.singer_id
          and s.album_id = al.album_id
          and sin.singer_id = #{singerId}
    </select>

    <resultMap id="sin_song" type="singerSongVo">
        <result column="song_id" property="songId"/>
        <result column="song_name" property="songName"/>
        <result column="song_images" property="songImages"/>
        <result column="song_length" property="songLength"/>
        <result column="region_id" property="regionId"/>
        <result column="add_time" property="addTime"/>
        <result column="song_address" property="songAddress"/>
        <result column="lyric" property="lyric"/>
        <collection property="album" ofType="albumVo" javaType="albumVo">
            <result column="album_id" property="albumId"/>
            <result column="album_name" property="albumName"/>
        </collection>
    </resultMap>

    <select id="findSongById" resultType="com.tanx.music.pojo.model.Song">
        select song_id songId,song_name songName from MusicWebsite.song where song_id = #{songId}
    </select>

    <resultMap id="songs" type="song">
        <result column="song_id" property="songId"/>
        <result column="song_name" property="songName"/>
    </resultMap>

    <select id="findSongLinkSheet" resultType="sheetSongVo" resultMap="sheet_song">
        select sin.singer_id,sin.singer_name,son.song_id,son.song_name,son.song_images,son.region_id,
               son.song_length,son.song_address,son.region_id,son.lyric,al.album_id,al.album_name,
               son.add_time from singer_and_song sas,singer sin,album al,
               (select * from song where song_id in
               (select s.song_id from song_list sl,song s,sheet_and_song sas
               where sl.song_list_id = sas.song_list_id and s.song_id = sas.song_id
               and sl.song_list_id = #{songSheetId})) son
        where sin.singer_id = sas.singer_id and sas.song_id = son.song_id
        and al.album_id = son.album_id
    </select>

    <resultMap id="sheet_song" type="sheetSongVo">
        <result column="song_id" property="songId"/>
        <result column="song_name" property="songName"/>
        <result column="song_images" property="songImages"/>
        <result column="song_length" property="songLength"/>
        <result column="add_time" property="addTime"/>
        <result column="region_id" property="regionId"/>
        <result column="song_address" property="songAddress"/>
        <result column="lyric" property="lyric"/>
        <collection property="albumVo" ofType="albumVo" javaType="albumVo">
            <result column="album_id" property="albumId"/>
            <result column="album_name" property="albumName"/>
        </collection>
        <collection property="singers" ofType="singerVo" javaType="list">
            <result column="singer_id" property="singerId"/>
            <result column="singer_name" property="singerName"/>
        </collection>
    </resultMap>

    <select id="querySongById" resultMap="songInfo">
        select s.song_id,s.song_name,s.song_length,
               s.song_images,a.album_id,a.album_name,
               sin.singer_id,sin.singer_name
        from song s,album a,singer sin,singer_and_song sas
        where s.song_id = #{songId}
          and s.album_id = a.album_id
          and sin.singer_id = sas.singer_id
          and sas.song_id = s.song_id
    </select>

    <select id="findSongName" resultType="com.tanx.music.pojo.vo.SongVo">
        select son.song_name songName,son.song_id songId from
        (select song_name,s.song_id from song s,singer sin,singer_and_song sas
        where sas.song_id = s.song_id and sas.singer_id = sin.singer_id
        <if test="singerId!=null">and sas.singer_id = #{singerId}</if>) as son where song_name like #{query}
    </select>

    <select id="findSongLength" resultType="java.lang.Integer">
        select count(distinct song_id) from MusicWebsite.song
    </select>

    <resultMap id="songInfo" type="com.tanx.music.pojo.vo.ReturnSongVo">
        <id column="song_id" property="songId"/>
        <result column="song_name" property="songName"/>
        <result column="song_length" property="songLength"/>
        <result column="song_images" property="songImages"/>
        <collection property="author" ofType="com.tanx.music.pojo.vo.SingerVo">
            <id column="singer_id" property="singerId"/>
            <result column="singer_name" property="singerName"/>
        </collection>
        <collection property="album" ofType="com.tanx.music.pojo.vo.AlbumVo">
            <id column="album_id" property="albumId"/>
            <result column="album_name" property="albumName"/>
        </collection>
    </resultMap>
</mapper>